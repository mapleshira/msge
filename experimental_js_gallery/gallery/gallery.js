"use strict";
import { picture_data } from "./artwork/picture_data.js";

const controlDiv = document.getElementById("controls");
const writeDiv = document.getElementById("write");
const modalContent = document.getElementById("modal-content");
const modalDetails = {
    "picture": document.getElementById("modal-pic"),
    "link": document.getElementById("modal-link"),
    "title": document.getElementById("modal-title"),
    "description": document.getElementById("modal-desc")
};
const modalBackground = document.getElementById("modal-background");
const closeButton = document.getElementById("close");

function picClick(event) {
    if (event.button == 0) {
        event.preventDefault();
        modalPresent(picture_data, event.target.dataset.index); // send in our data-index attribute to generate the appropriate modal for the picture we clicked
        modalBackground.style.display = "block";
    }
}

function modalPresent(arr, pic) {
    modalDetails.picture.src = "gallery/artwork/" + arr[pic].pic_url;
    modalDetails.link.href = "gallery/artwork/" + arr[pic].pic_url;
    modalDetails.title.textContent = arr[pic].title;
    modalDetails.description.textContent = arr[pic].desc;
}

function modalClose() {
    modalBackground.style.display = "none";
}

function createGallery(arr, ctr) { // "arr" is "picture_data" and "ctr" is list of pics controlled/selected to display generated by getGroupPics
    writeDiv.innerHTML = ""; // resets div each time the gallery is created/recreated
    for (let i = 0; i < ctr.length; i++) {
        const img = document.createElement("img");
        const anchor = document.createElement("a");
        anchor.appendChild(img);
        anchor.setAttribute("href", `gallery/artwork/${arr[ctr[i]].pic_url}`);
        img.classList.add("pic");
        img.setAttribute("data-index", ctr[i]);
        img.setAttribute("src", `gallery/artwork/${arr[ctr[i]].pic_url}`);
        anchor.addEventListener("click", picClick);
        writeDiv.insertAdjacentElement("beforeend", anchor); // <img class="pic" data-index="_" src="gallery/_.bmp" />
    }
}

function getGroupPics(arr, ctr) { // "ctr" send in specific control groups
    let picCtr = [];
    for (let i = 0; i < arr.length; i++) {
        let year = arr[i].date.substring(0, arr[i].date.indexOf("/")); // gets the string up until the first forward slash, sorting by year
        for (let j = 0; j < ctr.length; j++) {
            if (year == ctr[j]) { // if controls match with this group
                picCtr.push(i); // push index
            }
        }
    }
    return picCtr; // return each index of each picture we need to render to the current gallery view
}

function getGroups(arr) {
    let grpLst = []; // almost redundant name with const groupList, but fuck it its a temp variable to return into that one
    for (let i = 0; i < arr.length; i++) {
        let year = arr[i].date.substring(0, arr[i].date.indexOf("/")); // gets the string up until the first forward slash, sorting by year
        if (year != grpLst.at(-1)) { // if the last year in the list is not equal to the current year...
            grpLst.push(year); // push year
        }
    }
    return grpLst;
}

function createControls(grp) { // "grp" send in groupList. this generates the controls for each group in the gallery
    for (let i = 0; i < grp.length; i++) {
        const controlCheck = document.createElement("input");
        controlCheck.setAttribute("type", "checkbox");
        controlCheck.setAttribute("id", "control-" + i);
        //controlCheck.setAttribute("name", "control-" + i); no need to use name, static site setup
        controlCheck.setAttribute("value", grp[i]);
        controlCheck.addEventListener("click", updateControls);

        const controlLabel = document.createElement("label");
        controlLabel.setAttribute("for", "control-" + i)
        controlLabel.textContent = "20" + grp[i];

        controlDiv.insertAdjacentElement("beforeend", controlCheck);
        controlDiv.insertAdjacentElement("beforeend", controlLabel);
        controlDiv.insertAdjacentHTML("beforeend", "<br />");
    }
}

function updateControls(event) {
    let grpCtr = [];
    if (event.target.checked == true) {
        grpCtr = prevGroupControl;
        grpCtr.push(event.target.value);
    }
    else {
        for (let i = 0; i < prevGroupControl.length; i++) {
            if (prevGroupControl[i] != event.target.value)
            {
                grpCtr.push(prevGroupControl[i]);
            }
        } 
    }
    prevGroupControl = grpCtr;
    createGallery(picture_data, getGroupPics(picture_data, grpCtr));
}

closeButton.addEventListener("click", modalClose);
modalBackground.addEventListener("click", modalClose);
modalContent.addEventListener("click", (event) => event.stopPropagation());

let prevGroupControl = [];
const groupList = getGroups(picture_data);
createGallery(picture_data, getGroupPics(picture_data, "0"));
createControls(groupList);